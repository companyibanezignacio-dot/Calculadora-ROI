<!doctype html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Simulador Imperia SCM - Ejemplo</title>

    <!-- Tipografía y estilos básicos -->
    <style>
        /* Tipografía similar a Segoe UI / Arial */
        :root{
            --bg:#f5f7fb;
            --card:#ffffff;
            --accent:#4b6cb7; /* suave azul */
            --muted:#6b7280;
            --radius:12px;
            --shadow: 0 6px 20px rgba(35, 46, 82, 0.08);
            --gap:18px;
        }
        html,body{height:100%;}
        body{
            margin:0;
            font-family: "Segoe UI", Arial, sans-serif;
            background: linear-gradient(180deg, #f6f8fc 0%, var(--bg) 100%);
            color:#1f2937;
            display:flex;
            align-items:center;
            justify-content:center;
            padding:40px 16px;
        }

        /* Contenedor centrado */
        .container{
            width:100%;
            max-width:920px;
            display:grid;
            grid-template-columns: 1fr;
            gap:var(--gap);
        }

        /* Tarjeta (formulario / resultados) */
        .card{
            background:var(--card);
            border-radius:var(--radius);
            box-shadow:var(--shadow);
            padding:22px;
        }

        h1{
            font-size:20px;
            margin:0 0 12px 0;
            color:#102040;
        }

        /* Formulario */
        form{
            display:grid;
            grid-template-columns: repeat(auto-fit,minmax(220px,1fr));
            gap:14px;
            align-items:end;
        }
        .field{
            display:flex;
            flex-direction:column;
            gap:8px;
        }
        label{
            font-size:13px;
            color:var(--muted);
        }
        input[type="text"], select{
            padding:10px 12px;
            border-radius:8px;
            border:1px solid #e6e9ef;
            background: #fbfcfe;
            outline:none;
            font-size:15px;
        }
        input[type="text"]:focus, select:focus{
            box-shadow:0 0 0 4px rgba(75,108,183,0.08);
            border-color:var(--accent);
        }

        /* Botones */
        .actions{
            display:flex;
            gap:10px;
            justify-content:flex-end;
            grid-column: 1 / -1;
        }
        button{
            cursor:pointer;
            border:0;
            padding:10px 14px;
            border-radius:10px;
            font-weight:600;
            color:white;
            background:var(--accent);
            box-shadow:0 6px 18px rgba(75,108,183,0.12);
        }
        button.secondary{
            background:#6b7280;
            box-shadow:none;
        }
        button[disabled]{
            opacity:0.5;
            cursor:not-allowed;
        }

        /* Tabla de resultados */
        .results{
            margin-top:6px;
            overflow:auto;
        }
        table{
            width:100%;
            border-collapse:collapse;
            font-size:14px;
            min-width:720px;
        }
        th, td{
            text-align:left;
            padding:12px 14px;
            border-bottom:1px solid #eef1f6;
        }
        thead th{
            background:linear-gradient(180deg, rgba(75,108,183,0.06), transparent);
            color:#102040;
            font-weight:700;
        }
        tbody tr:hover{background:#fbfdff;}
        .muted{color:var(--muted);}
        .right{text-align:right;}
        .note{
            margin-top:12px;
            font-size:13px;
            color:var(--muted);
        }

        /* Responsive improvements */
        @media (max-width:720px){
            form{grid-template-columns:1fr;}
            .actions{justify-content:stretch; flex-direction:column;}
            button{width:100%;}
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Tarjeta de entrada: formulario -->
        <div class="card" aria-labelledby="titulo-form">
            <h1 id="titulo-form">Simulador Imperia SCM - Entrada</h1>

            <!-- Formulario con etiquetas e inputs -->
            <form id="inputForm" onsubmit="return false;">
                <!-- Cada campo con su label e input -->
                <div class="field">
                    <label for="sales">Sales (Million Currency)</label>
                    <input id="sales" name="sales" type="text" inputmode="numeric" placeholder="Ej: 300" value="300">
                </div>

                <div class="field">
                    <label for="service">Company Current Service Level (%)</label>
                    <input id="service" name="service" type="text" placeholder="Ej: 95" value="95">
                </div>

                <div class="field">
                    <label for="inventory">Inventory Range (Million Currency)</label>
                    <input id="inventory" name="inventory" type="text" placeholder="Ej: 30-50" value="30-50">
                </div>

                <div class="field">
                    <label for="industry">Industry</label>
                    <select id="industry" name="industry">
                        <option>Others</option>
                        <option>Retail</option>
                        <option>Manufacturing</option>
                        <option>FMCG</option>
                    </select>
                </div>

                <div class="field">
                    <label for="planning">How do they Currently Plan?</label>
                    <select id="planning" name="planning">
                        <option>Internal Development</option>
                        <option>Excel / Manual</option>
                        <option>Other Tool</option>
                        <option>External Vendor</option>
                    </select>
                </div>

                <!-- Botones -->
                <div class="actions">
                    <button id="calculateBtn" type="button">Calcular Resultados</button>
                    <button id="exportBtn" type="button" class="secondary" disabled>Exportar a Excel</button>
                </div>
            </form>
        </div>

        <!-- Tarjeta de resultados: inicialmente oculta -->
        <div id="resultsCard" class="card" style="display:none;">
            <h1>Resultados</h1>

            <!-- Contenedor donde se inyecta la tabla -->
            <div class="results" id="resultsContainer" aria-live="polite">
                <!-- Tabla generada por JavaScript -->
                <table id="results-table" role="table" aria-label="Resultados Imperia">
                    <thead>
                        <tr>
                            <th></th>
                            <th>w/o Imperia</th>
                            <th>Change</th>
                            <th>w/ Imperia</th>
                            <th>Cash Variation</th>
                        </tr>
                    </thead>
                    <tbody id="results-body">
                        <!-- Filas inyectadas por JS -->
                    </tbody>
                </table>
            </div>

            <div class="note">All Data in Million EUR</div>
        </div>
    </div>

    <!-- Librería SheetJS para exportar a Excel -->
    <script src="https://cdn.jsdelivr.net/npm/xlsx/dist/xlsx.full.min.js"></script>

    <script>
        // =========================
        // Lógica JavaScript
        // Comentarios en español explicando cada parte
        // =========================

        // Referencias a elementos importantes
        const calculateBtn = document.getElementById('calculateBtn');
        const exportBtn = document.getElementById('exportBtn');
        const resultsCard = document.getElementById('resultsCard');
        const resultsBody = document.getElementById('results-body');
        const salesInput = document.getElementById('sales');
        const serviceInput = document.getElementById('service');
        const inventoryInput = document.getElementById('inventory');
        const industryInput = document.getElementById('industry');
        const planningInput = document.getElementById('planning');

        // Valores estáticos por defecto que queremos mostrar en la tabla.
        // Aquí mantenemos los valores del ejemplo pero vinculamos Sales para que refleje el input.
        const STATIC_ROWS = [
            // [label, w/o, change, w/, cashVariation]
            ["Sales", null, "", null, "0.45"],
            ["Service Level", null, "4%", "99%", ""],
            ["EBITDA%", "10%", "1.0%", "11%", "2.30"],
            ["Inventory", "40.00", "(5%)", "38.00", "2.00"],
            ["Financial Expenses", "1.80", "(5%)", "1.71", "0.07"],
            ["Imperia Licensing", "-", "", "0.03", "0.02"],
            ["Cash Variation", "", "", "", "4.79"],
            ["EBITDA Gross Improvement", "", "", "", "3.63"]
        ];

        // Formatea número con 2 decimales (si es número)
        function formatNumber(v){
            const n = Number(String(v).replace(/[^0-9.\-]/g,''));
            if (!isFinite(n)) return v;
            return n.toFixed(2);
        }

        // Función que construye la tabla en el DOM usando los datos estáticos y el input Sales
        function buildTable(){
            // Limpiar cuerpo
            resultsBody.innerHTML = '';

            // Tomar valor de Sales del input; si no es válido usar 300 por defecto
            const rawSales = salesInput.value.trim();
            const salesNum = Number(String(rawSales).replace(/[^0-9.\-]/g,''));
            const salesValue = isFinite(salesNum) && rawSales !== '' ? salesNum : 300;

            // Para mostrar coherente: w/o Sales = Sales input; w/ Sales = +2% (ejemplo)
            const sales_w_o = formatNumber(salesValue);
            const sales_w_with = formatNumber(salesValue * 1.02); // ejemplo +2%

            // Rellenar filas con los valores; respetamos el ejemplo
            const rows = JSON.parse(JSON.stringify(STATIC_ROWS)); // clonar
            rows[0][1] = sales_w_o;
            rows[0][3] = sales_w_with;

            // Añadir cada fila al tbody
            rows.forEach(r => {
                const tr = document.createElement('tr');

                // Celda label
                const tdLabel = document.createElement('td');
                tdLabel.textContent = r[0];
                tr.appendChild(tdLabel);

                // w/o Imperia
                const tdWo = document.createElement('td');
                tdWo.textContent = r[1] !== null ? r[1] : "";
                tdWo.className = (r[1] && !isNaN(Number(String(r[1]).replace(/[^0-9.\-]/g,'')))) ? 'right' : '';
                tr.appendChild(tdWo);

                // Change
                const tdChange = document.createElement('td');
                tdChange.textContent = r[2] !== null ? r[2] : "";
                tdChange.className = 'muted';
                tr.appendChild(tdChange);

                // w/ Imperia
                const tdWith = document.createElement('td');
                tdWith.textContent = r[3] !== null ? r[3] : "";
                tdWith.className = (r[3] && !isNaN(Number(String(r[3]).replace(/[^0-9.\-]/g,'')))) ? 'right' : '';
                tr.appendChild(tdWith);

                // Cash Variation
                const tdCash = document.createElement('td');
                tdCash.textContent = r[4] !== null ? r[4] : "";
                tdCash.className = 'right';
                tr.appendChild(tdCash);

                resultsBody.appendChild(tr);
            });

            // Mostrar la tarjeta de resultados y habilitar export
            resultsCard.style.display = 'block';
            exportBtn.disabled = false;
        }

        // Evento click para calcular resultados (muestra la tabla)
        calculateBtn.addEventListener('click', function(){
            // Podríamos validar aquí, pero mantenemos comportamiento simple
            buildTable();
            // Hacer scroll hacia resultados en pantallas pequeñas
            resultsCard.scrollIntoView({behavior:'smooth', block:'start'});
        });

        // Función para exportar la tabla HTML a un archivo .xlsx usando SheetJS
        function exportTableToExcel(){
            const table = document.getElementById('results-table');

            // Usamos SheetJS para convertir la tabla a workbook
            const wb = XLSX.utils.table_to_book(table, {sheet: "Results"});
            // Nombre de archivo con fecha
            const filename = 'imperia_scm_results.xlsx';
            XLSX.writeFile(wb, filename);
        }

        // Evento para el botón exportar
        exportBtn.addEventListener('click', function(){
            try {
                exportTableToExcel();
            } catch (e) {
                alert('Error exportando a Excel: ' + (e && e.message ? e.message : e));
            }
        });

        // Si el usuario presiona Enter en el formulario, ejecutar cálculo
        document.getElementById('inputForm').addEventListener('keydown', function(e){
            if (e.key === 'Enter') {
                e.preventDefault();
                calculateBtn.click();
            }
        });

        // Inicializa la vista con la tabla oculta (y opcionalmente crear tabla con valores por defecto)
        // Puedes descomentar la línea siguiente para mostrar resultados al cargar:
        // buildTable();
    </script>
</body>
</html>
